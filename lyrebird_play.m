% lyrebird_play.m
% A MATLAB/Octave script to play songs generated by Lyrebird (a musical
% steganography system).
% (cc) BY 2019 Pete Laric
% http://www.PeteLaric.com

clear all
clc

% globals
num_tones = 88
sample_rate = 8192
seconds_per_blip = 0.20
track_amplitude = 0.24
bass_fundamental_pitch = 25 %key of Am: 13, 25; key of C: 16,28
fade_in_samples = 4; %10
fade_out_samples = 10;

% 12-bar blues progression
blues_progression = [ 0 0 0 0 0 0 0 0 ...
                      0 0 0 0 0 0 0 0 ...
                      0 0 0 0 0 0 0 0 ...
                      0 0 0 0 0 0 0 0 ...
                      5 5 5 5 5 5 5 5 ...
                      5 5 5 5 5 5 5 5 ...
                      0 0 0 0 0 0 0 0 ...
                      0 0 0 0 0 0 0 0 ...
                      7 7 7 7 7 7 7 7 ...
                      5 5 5 5 5 5 5 5 ...
                      0 0 0 0 0 0 0 0 ...
                      0 0 0 0 0 0 0 0 ];

chord_progression = blues_progression

%chord_progression = round(rand(1,92) * 12) %random
                  
num_chords = length(chord_progression)


% load song from file
input_filename = 'song.lyrebird.txt'
output_filename = 'lyrebird_song.wav' % MATLAB can output WAV files
%output_filename = 'lyrebird_song.ogg'  % or OGG files

Score = load_lyrebird_song(input_filename)

[m, n] = size(Score)

% % TEST (generates random score)
% m = 100
% n = 4
% Score = round(rand(m,n) .* 3)

% compute pitch table
% tones = 0:num_tones-1;
tones = 1:num_tones;
tones = tones';
% // pitch formula: f = 2 ^ (tone / 12) * 440
frequencies = 2 .^ ((tones - 49) ./ 12) .* 440;

%t = linspace(0, 1, sample_rate * seconds_per_blip); %time base
t = linspace(0, seconds_per_blip, sample_rate * seconds_per_blip); %time base

for i=1:m
    
    i
    
    current_tones = Score(i, :);
    current_chord = chord_progression(mod(i, num_chords)+1);
    
    % bass
    chord_component_1 = current_tones(1);
    pitch_1 = select_pitch(chord_component_1, current_chord);
    a1 = track_amplitude;
    if (pitch_1 < 0)
        a1 = 0;
    end
    f1 = frequencies(pitch_1 + bass_fundamental_pitch);
    
    % tenor
    chord_component_2 = current_tones(2);
    pitch_2 = select_pitch(chord_component_2, current_chord);
    a2 = track_amplitude;
    if (pitch_2 < 0)
        a2 = 0;
    end
    f2 = frequencies(pitch_2 + bass_fundamental_pitch + 12);
    
    % alto
    chord_component_3 = current_tones(3);
    pitch_3 = select_pitch(chord_component_3, current_chord);
    a3 = track_amplitude;
    if (pitch_3 < 0)
        a3 = 0;
    end
    f3 = frequencies(pitch_3 + bass_fundamental_pitch + 24);
    
    % soprano
    chord_component_4 = current_tones(4);
    pitch_4 = select_pitch(chord_component_4, current_chord);
    a4 = track_amplitude;
    if (pitch_4 < 0)
        a4 = 0;
    end
    f4 = frequencies(pitch_4 + bass_fundamental_pitch + 36);
    
    phi = 0; %phase
    
    %i = round(rand * (num_tones - 1)) + 1;
    
    v =     a1 * sin(2 * pi * f1 * t + phi); % bass
    v = v + a2 * sin(2 * pi * f2 * t + phi); % tenor
    v = v + a3 * sin(2 * pi * f3 * t + phi); % alto
    v = v + a4 * sin(2 * pi * f4 * t + phi); % soprano
    
    % fade in
    fade_in_amplitudes = linspace(0, 1, fade_in_samples);
    v(1:fade_in_samples) = v(1:fade_in_samples) .* fade_in_amplitudes;
    
    % fade out
    fade_out_amplitudes = linspace(1, 0, fade_out_samples);
    v(end-fade_out_samples+1:end) = v(end-fade_out_samples+1:end) .* fade_out_amplitudes;
    
    if exist('audio_buffer')
        
        audio_buffer = [audio_buffer, v];
        
    else
        
        audio_buffer = v;
        
    end
    
    % if we're plotting/sounding every blip
    %figure(1);
    %plot(v);
    %soundsc(v, sample_rate);
    %pause(seconds_per_blip)
    
end

fprintf('\n\n');

audiowrite(output_filename, audio_buffer, sample_rate);

% if we're plotting the whole song afterwards
figure(1);
plot(audio_buffer);

%soundsc(audio_buffer, sample_rate); %cannot be stopped once started


% if we're playing the whole song afterwards
% from https://stackoverflow.com/questions/1742268/how-to-stop-sound-in-matlab
player = audioplayer(audio_buffer, sample_rate)

% start the playback
play(player);

% % pause the playback
% pause(player);
% 
% % resume the playback
% resume(player)

disp('Press any key to stop player...')

pause

% to kill sound
%https://stackoverflow.com/questions/1742268/how-to-stop-sound-in-matlab
%clear playsnd
%clear sound
% ugh, none of that shit works!  -_-

% stop the playback <-- THIS WORKS!!!  :D
stop(player)


